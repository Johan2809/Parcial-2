package agenda.model;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.IntStream;

import agenda.exceptions.ContactoException;

public class Agenda implements Serializable {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	private String nombre;
	private Contacto[] listaContactos;
	private Grupo[] listaGrupos;
	private Reunion[] listaReuniones;

	public Agenda(String nombre, int numeroContactos, int numeroGrupos, int numeroReuniones) {
		super();
		this.nombre = nombre;
		this.listaContactos = new Contacto[numeroContactos];
		this.listaGrupos = new Grupo[numeroGrupos];
		this.listaReuniones = new Reunion[numeroReuniones];
	}

	public Agenda() {
		super();
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public Contacto[] getListaContactos() {
		return listaContactos;
	}

	public void setListaContactos(Contacto[] listaContactos) {
		this.listaContactos = listaContactos;
	}

	public Grupo[] getListaGrupos() {
		return listaGrupos;
	}

	public void setListaGrupos(Grupo[] listaGrupos) {
		this.listaGrupos = listaGrupos;
	}

	public Reunion[] getListaReuniones() {
		return listaReuniones;
	}

	public void setListaReuniones(Reunion[] listaReuniones) {
		this.listaReuniones = listaReuniones;
	}

	@Override
	public String toString() {
		return "Agenda [nombre=" + nombre + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((nombre == null) ? 0 : nombre.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Agenda other = (Agenda) obj;
		if (nombre == null) {
			if (other.nombre != null)
				return false;
		} else if (!nombre.equals(other.nombre))
			return false;
		return true;
	}

	public void agregarContacto(Contacto newContacto) throws ContactoException {
		// Busca el contacto en la lista
		Contacto contacto = Arrays.stream(listaContactos).filter(c -> c != null).filter(c -> c.equals(newContacto)).findFirst().orElse(null);
		// Si ya existe se lanza una excepcion
		if (contacto != null) {
			throw new ContactoException("El contacto ya existe");
		}
		// Si no existe se busca la primera posición disponible
		int posDisponible = IntStream.range(0, listaContactos.length).filter(i -> listaContactos[i] == null).findFirst().orElse(-1);
		// Si la agenda está llena se lanza una excepción
		if (posDisponible == -1) {
			throw new ContactoException("Agenda llena");
		}
		// Si hay posiciones disponibles se añade el nuevo contacto
		listaContactos[posDisponible] = newContacto;
	}

	public boolean existeContacto(Contacto contacto) {
	    // Se Busca el contacto en la lista
	    return Arrays.stream(listaContactos).anyMatch(c -> c != null && c.equals(contacto));
	}

	public void listarContactos() {
		// Se imprime "Lista de contactos"
		System.out.println("Lista de contactos:");
		// Se Recorre la lista de contactos y se imprime
		Arrays.stream(listaContactos).filter(c -> c != null).forEach(System.out::println);
	}

	public String buscaContacto(String nombre) {
		// Se Busca el contacto por nombre
		Optional<Contacto> contacto = Arrays.stream(listaContactos).filter(c -> c != null).filter(c -> c.getNombre().equalsIgnoreCase(nombre)).findFirst();
		// Si se encuentra el contacto se retorna su teléfono
		if (contacto.isPresent()) {
			return "Teléfono de " + nombre + ": " + contacto.get().getTelefono();
		}
		// Si no se encuentra el contacto, se devuelve un mensaje indicando que no
		// se encontró
		else {
			return "No se encontró el contacto.";
		}
	}

	public void eliminarContacto(Contacto contacto) {
		//	Se Busca la posición del contacto en la lista
		int index = IntStream.range(0, listaContactos.length)
				.filter(i -> listaContactos[i] != null && listaContactos[i].equals(contacto)).findFirst().orElse(-1);
		// Si se encontró el contacto se elimina de la lista
		// Si no se encontró, se imprime un mensaje indicando que no se encontró el contacto
		if (index != -1) {
			listaContactos[index] = null;
			System.out.println("Contacto eliminado correctamente.");
		} else {
			System.out.println("No se encontró el contacto.");
		}
	}

	public boolean agendaLlena() {
		// Se Verifica si existe algún contacto en la lista que sea null Si hay
		// al menos un contacto null, la agenda no está llena
		// Si todos los contactos son distintos de null, la agenda está llena
		return Arrays.stream(listaContactos).allMatch(Objects::nonNull);
	}

	public int huecosLibres() {
		// Se Cuenta el número de contactos que son null en la lista
		// Este número representa la cantidad de huecos libres en la agenda
		return (int) Arrays.stream(listaContactos).filter(Objects::isNull).count();
	}

//---------------------------------------------------Preparcial------------------------------------------------
	/**
	   * Método que recibe un arreglo de strings con números de teléfono y devuelve un nuevo arreglo
	   * con los números que son capicúa.
	   *
	   * @param telefonos Arreglo de strings con números de teléfono.
	   * @return Arreglo de strings con los números que son capicúa.
	   */
	  public static String[] numerosCapicua(String[] telefonos) {
	    return Arrays.stream(telefonos)
	                 .filter(listaContactos::esCapicua)
	                 .toArray(String[]::new);
	  }

	  /**
	   * Método que verifica si un número de teléfono es capicúa.
	   *
	   * @param telefono Número de teléfono a verificar.
	   * @return true si el número de teléfono es capicúa, false en caso contrario.
	   */
	  private boolean esCapicua(String telefono) {
	    int i = 0;
	    int j = telefono.length() - 1;
	    while (i < j) {
	      if (telefono.charAt(i) != telefono.charAt(j)) {
	        return false;
	      }
	      i++;
	      j--;
	    }
	    return true;
	  }

}